//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Control/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""b257ccc9-b69b-4ad8-8a48-7424961ba0eb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ee2ee1d4-3e84-45af-924a-07f8b7da6b21"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Open inventory"",
                    ""type"": ""Button"",
                    ""id"": ""5b0adf54-ae8a-45c4-ba1d-35133a53bcdc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f0aecc23-c9f6-400c-82e1-ade674fa64ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43f1cfa7-26ea-450e-8c60-b9c995c16f98"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a65e36a-8cd6-4bc4-8fbd-1e5094eef945"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b2ed0a08-4b93-418f-800f-36f0a7e8052c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f2854a1a-2c9e-488e-9ca4-ccba198b3baa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""296a3278-b2f0-4c58-97e8-e462000895aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""718ed6ef-9130-4a0a-a27e-20ebd8a8a622"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""234d9967-c7fa-4295-8d56-a857c0e05ba4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0186fde8-1488-4ab3-acd4-55fce440ecb0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryInput"",
            ""id"": ""33a2e237-f40d-4581-8d2a-30038ddda6a1"",
            ""actions"": [
                {
                    ""name"": ""Close inventory"",
                    ""type"": ""Button"",
                    ""id"": ""1a730843-fc89-4895-9633-8fe0f4d35c14"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""ad282e1a-d97e-4af7-9cad-351f014f4171"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3bc6009-8fa7-4c4f-b488-2291f17e0df4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6688daa-cc21-4379-879f-5ec389aa244e"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Movement = m_PlayerInput.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInput_Openinventory = m_PlayerInput.FindAction("Open inventory", throwIfNotFound: true);
        m_PlayerInput_Shoot = m_PlayerInput.FindAction("Shoot", throwIfNotFound: true);
        // InventoryInput
        m_InventoryInput = asset.FindActionMap("InventoryInput", throwIfNotFound: true);
        m_InventoryInput_Closeinventory = m_InventoryInput.FindAction("Close inventory", throwIfNotFound: true);
        m_InventoryInput_Delete = m_InventoryInput.FindAction("Delete", throwIfNotFound: true);
    }

    ~@PlayerControl()
    {
        UnityEngine.Debug.Assert(!m_PlayerInput.enabled, "This will cause a leak and performance issues, PlayerControl.PlayerInput.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_InventoryInput.enabled, "This will cause a leak and performance issues, PlayerControl.InventoryInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private List<IPlayerInputActions> m_PlayerInputActionsCallbackInterfaces = new List<IPlayerInputActions>();
    private readonly InputAction m_PlayerInput_Movement;
    private readonly InputAction m_PlayerInput_Openinventory;
    private readonly InputAction m_PlayerInput_Shoot;
    public struct PlayerInputActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerInputActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerInput_Movement;
        public InputAction @Openinventory => m_Wrapper.m_PlayerInput_Openinventory;
        public InputAction @Shoot => m_Wrapper.m_PlayerInput_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Openinventory.started += instance.OnOpeninventory;
            @Openinventory.performed += instance.OnOpeninventory;
            @Openinventory.canceled += instance.OnOpeninventory;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayerInputActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Openinventory.started -= instance.OnOpeninventory;
            @Openinventory.performed -= instance.OnOpeninventory;
            @Openinventory.canceled -= instance.OnOpeninventory;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);

    // InventoryInput
    private readonly InputActionMap m_InventoryInput;
    private List<IInventoryInputActions> m_InventoryInputActionsCallbackInterfaces = new List<IInventoryInputActions>();
    private readonly InputAction m_InventoryInput_Closeinventory;
    private readonly InputAction m_InventoryInput_Delete;
    public struct InventoryInputActions
    {
        private @PlayerControl m_Wrapper;
        public InventoryInputActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Closeinventory => m_Wrapper.m_InventoryInput_Closeinventory;
        public InputAction @Delete => m_Wrapper.m_InventoryInput_Delete;
        public InputActionMap Get() { return m_Wrapper.m_InventoryInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryInputActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryInputActionsCallbackInterfaces.Add(instance);
            @Closeinventory.started += instance.OnCloseinventory;
            @Closeinventory.performed += instance.OnCloseinventory;
            @Closeinventory.canceled += instance.OnCloseinventory;
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
        }

        private void UnregisterCallbacks(IInventoryInputActions instance)
        {
            @Closeinventory.started -= instance.OnCloseinventory;
            @Closeinventory.performed -= instance.OnCloseinventory;
            @Closeinventory.canceled -= instance.OnCloseinventory;
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
        }

        public void RemoveCallbacks(IInventoryInputActions instance)
        {
            if (m_Wrapper.m_InventoryInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryInputActions @InventoryInput => new InventoryInputActions(this);
    public interface IPlayerInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnOpeninventory(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IInventoryInputActions
    {
        void OnCloseinventory(InputAction.CallbackContext context);
        void OnDelete(InputAction.CallbackContext context);
    }
}
